package conver

import (
	"fmt"
	"github.com/NICEXAI/go2struct"
	"github.com/NICEXAI/go2struct-tool/internal/errorx"
	"github.com/NICEXAI/go2struct-tool/util"
	util2 "github.com/NICEXAI/go2struct/util"
	"os"
	"strings"
)

const (
	commentsTmpl = "// Code generated by go2struct. DO NOT EDIT.\npackage %s\n\n"
)

var (
	iFormatList = []string{"json", "yml", "yaml"}
	oFormatList = []string{"go"}
)

// Convert arbitrary formats to Go Struct
func Convert(from, to, mod, tag string) (err error) {
	var (
		content       []byte
		structContent []byte
		file          *os.File
	)

	if !validateLegalFormat(from, iFormatList) {
		return errorx.ErrOriginFileFormatNotSupport
	}

	if !validateLegalFormat(to, oFormatList) {
		return errorx.ErrTargetFileFormatNotSupport
	}

	fileName := util.GetFileName(to)
	if mod == "" {
		mod = fileName
	}

	originAbsPath := util.GetFileAbsPath(from)
	if !util.IsFileExist(originAbsPath) {
		return errorx.ErrOriginFileNotExist
	}

	targetFolderAbsPath := util.GetFolderAbsPath(to)
	if err = util.MkdirIfNotExist(targetFolderAbsPath); err != nil {
		return err
	}

	content, err = os.ReadFile(originAbsPath)
	if err != nil {
		return err
	}

	if util.GetFileExt(from) == "json" {
		if structContent, err = go2struct.JSON2Struct(util2.UpperCamelCaseToUnderscore(fileName), content, tag); err != nil {
			return err
		}
	} else {
		if structContent, err = go2struct.YAML2Struct(util2.UpperCamelCaseToUnderscore(fileName), content, tag); err != nil {
			return err
		}
	}

	file, err = os.Create(util.GetFileAbsPath(to))
	if err != nil {
		return err
	}
	defer file.Close()

	if _, err = file.WriteString(fmt.Sprintf(commentsTmpl, mod) + string(structContent)); err != nil {
		return err
	}
	return nil
}

//validate legal file format
func validateLegalFormat(filename string, formatList []string) bool {
	fileArr := strings.Split(filename, ".")
	if len(fileArr) < 2 {
		return false
	}
	return util.Include(fileArr[len(fileArr)-1], formatList)
}
